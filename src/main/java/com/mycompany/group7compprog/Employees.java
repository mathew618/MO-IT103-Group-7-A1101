/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.group7compprog;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author mathe
 */
public final class Employees extends javax.swing.JPanel {

    /**
     * Creates new form Employees
     */
    public Employees() {
        initComponents();
        empTableL.setModel(Emp.getEmpModel());
        
        // Enable sorting
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(empTableL.getModel());
        empTableL.setRowSorter(sorter);
        
        // Search Employee function
        searchF.getDocument().addDocumentListener(new DocumentListener() {
            private void filterTable() {
                String searchText = searchF.getText().toLowerCase();

                if (searchF.getText().equals("Search Employee Name")) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
                }
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filterTable();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gradientPanel1 = new com.mycompany.group7compprog.GradientPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        empTableL = new javax.swing.JTable();
        viewEmp = new javax.swing.JButton();
        addEmpBtn = new javax.swing.JButton();
        removeEmpBtn = new javax.swing.JButton();
        searchF = new javax.swing.JTextField();

        gradientPanel1.setColor1(new java.awt.Color(228, 255, 255));
        gradientPanel1.setColor2(new java.awt.Color(102, 204, 255));

        jLabel5.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        jLabel5.setText("â€¢ EMPLOYEES");

        empTableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee Number", "Last Name", "First Name", "Birthdate", "Address", "Phone Number", "Status", "Position", "SSS", "Tin", "Philhealth"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(empTableL);

        viewEmp.setBackground(new java.awt.Color(255, 255, 204));
        viewEmp.setText("View Employee");
        viewEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEmpActionPerformed(evt);
            }
        });

        addEmpBtn.setBackground(new java.awt.Color(189, 222, 255));
        addEmpBtn.setText("Add Employee");
        addEmpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmpBtnActionPerformed(evt);
            }
        });

        removeEmpBtn.setBackground(new java.awt.Color(255, 204, 204));
        removeEmpBtn.setText("Remove Employee");
        removeEmpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEmpBtnActionPerformed(evt);
            }
        });

        searchF.setText("Search Employee Name");
        searchF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchFFocusLost(evt);
            }
        });

        javax.swing.GroupLayout gradientPanel1Layout = new javax.swing.GroupLayout(gradientPanel1);
        gradientPanel1.setLayout(gradientPanel1Layout);
        gradientPanel1Layout.setHorizontalGroup(
            gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradientPanel1Layout.createSequentialGroup()
                .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gradientPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(gradientPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gradientPanel1Layout.createSequentialGroup()
                                .addComponent(viewEmp)
                                .addGap(18, 18, 18)
                                .addComponent(searchF, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                                .addGap(30, 30, 30)
                                .addComponent(addEmpBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeEmpBtn)))))
                .addGap(15, 15, 15))
        );
        gradientPanel1Layout.setVerticalGroup(
            gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradientPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchF, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(viewEmp)
                        .addComponent(addEmpBtn)
                        .addComponent(removeEmpBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addGap(50, 50, 50))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 622, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(gradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(gradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEmpActionPerformed
        int selectedRow = empTableL.getSelectedRow(); // get selected row from your JTable

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an employee first.");
            return;
        }
        /*
        int columnCount = empTableL.getColumnCount();
        Object[] empData = new Object[columnCount];
        for (int i = 0; i < columnCount; i++) {
            empData[i] = empTableL.getValueAt(selectedRow, i);
        }*/
        
        int modelRow = empTableL.convertRowIndexToModel(selectedRow);
        
        String[] data = Emp.get().get(modelRow);
        
        String[] empData = {data[0], data[1], data[2], data[3], data[4], data[5], data[10], data[11], data[6], data[8], data[7], data[9]};

        EmployeeDetails detailsFrame = new EmployeeDetails(empData);
        detailsFrame.setVisible(true);
    }//GEN-LAST:event_viewEmpActionPerformed

    private static AddEmployee n;

    private void addEmpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmpBtnActionPerformed
        // TODO add your handling code here:
        if (n == null || !n.isDisplayable()) {
            n = new AddEmployee(this);
            n.setVisible(true);
        }
    }//GEN-LAST:event_addEmpBtnActionPerformed

    private void removeEmpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEmpBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = empTableL.getSelectedRow(); // get selected row from your JTable

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an employee to remove.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove this employee?");
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        int modelRow = empTableL.convertRowIndexToModel(selectedRow);

        DefaultTableModel model = (DefaultTableModel) empTableL.getModel();
        
        String empID = model.getValueAt(modelRow, 0).toString();
        if (empID.equals("Employee #")) {
            JOptionPane.showMessageDialog(this, "Please select an employee to remove.");
            return;
        }
        
        //Remove Employee CSV
        String filePath = "temp_emp.csv";
        List<String> lines = new ArrayList<>();
        
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            int currentRow = 0;

            while ((line = reader.readLine()) != null) {
                if (currentRow != modelRow) { // Skip the row being removed
                    lines.add(line);
                }
                currentRow++;
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading file: " + e.getMessage());
            return;
        }
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            for (String line : lines) {
                writer.write(line);
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing file: " + e.getMessage());
        }

        // Reload data from updated CSV
        Emp.reloadEmp();
        JOptionPane.showMessageDialog(this, "Employee removed.");

    }//GEN-LAST:event_removeEmpBtnActionPerformed

    private void searchFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFFocusGained
        // TODO add your handling code here:
        searchF.setText("");
    }//GEN-LAST:event_searchFFocusGained

    private void searchFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFFocusLost
        // TODO add your handling code here:
        if (searchF.getText().isEmpty()) {
            searchF.setText("Search Employee Name");
        }
    }//GEN-LAST:event_searchFFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEmpBtn;
    private javax.swing.JTable empTableL;
    private com.mycompany.group7compprog.GradientPanel gradientPanel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeEmpBtn;
    private javax.swing.JTextField searchF;
    private javax.swing.JButton viewEmp;
    // End of variables declaration//GEN-END:variables
}
